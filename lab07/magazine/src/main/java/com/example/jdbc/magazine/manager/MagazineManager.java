package com.example.jdbc.magazine.manager;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;

import com.example.jdbc.magazine.domain.Magazine;

public class MagazineManager {

	private Connection connection;

	private String url = "jdbc:hsqldb:hsql://localhost/workdb";

	private String createTableMagazine = "CREATE TABLE Magazine(id_position BIGINT UNIQUE GENERATED BY DEFAULT AS IDENTITY, name VARCHAR(30), amount INTEGER, margin INTEGER)";

	private PreparedStatement addPositionStmt;
	private PreparedStatement deleteOnePositionStmt;
	private PreparedStatement deleteAllPositionsStmt;
	private PreparedStatement getAllPositionsStmt;
	private PreparedStatement updatePositionsStmt;
	private PreparedStatement countAllPositionsStmt;
	private PreparedStatement getPositionsWithLowAmountStmt;

	private Statement statement;

	public MagazineManager() {
		try {
			connection = DriverManager.getConnection(url);
			statement = connection.createStatement();

			ResultSet rs = connection.getMetaData().getTables(null, null, null, null);
			boolean tableExists = false;
			while (rs.next()) {
				if ("Magazine".equalsIgnoreCase(rs.getString("TABLE_NAME"))) {
					tableExists = true;
					break;
				}
			}

			if (!tableExists)
				statement.executeUpdate(createTableMagazine);

			addPositionStmt = connection
					.prepareStatement("INSERT INTO Magazine (name, amount, margin) VALUES (?, ?, ?)");
			updatePositionsStmt = connection
					.prepareStatement("UPDATE Magazine SET margin = ? WHERE amount < ? and id_position = ?");
			deleteOnePositionStmt = connection
					.prepareStatement("DELETE FROM Magazine WHERE id_position = ?");
			deleteAllPositionsStmt = connection
					.prepareStatement("DELETE FROM Magazine");
			getAllPositionsStmt = connection
					.prepareStatement("SELECT id_position, name, amount, margin FROM Magazine");
			countAllPositionsStmt = connection
					.prepareStatement("SELECT COUNT(*) FROM Magazine");
			getPositionsWithLowAmountStmt = connection
					.prepareStatement("Select id_position, name, amount, margin FROM Magazine WHERE amount < ?");

		} catch (SQLException e) {
			e.printStackTrace();
		}
	}

	Connection getConnection() {
		return connection;
	}

	public int getCount() {

		try {
			ResultSet result = countAllPositionsStmt.executeQuery();
			if (result.next()) {
				return result.getInt(1);
			}
		} catch (SQLException e) {
			e.printStackTrace();
		}
		return 0;
	}

	int removeOnePosition(Magazine position) {

		int count = 0;
		try {
			deleteOnePositionStmt.setLong(1, position.getId());
			count = deleteOnePositionStmt.executeUpdate();
		} catch (SQLException e) {
			e.printStackTrace();
		}
		return count;
	}

	void removePositions() throws SQLException {

		try {
			connection.setAutoCommit(false);
			deleteAllPositionsStmt.executeUpdate();
			connection.commit();
		} catch (SQLException e) {
			connection.rollback();
		} finally {
			connection.setAutoCommit(true);
		}
	}

	void updatePositions(int margin, int amount) throws SQLException {

		int records = getCount();
		List<Magazine> positions = getAllPositions();

		updatePositionsStmt.setInt(1, margin);
		updatePositionsStmt.setInt(2, amount);

		for (int i = 0; i < records; i++) {

			Magazine positionRetrieved = positions.get(i);
			updatePositionsStmt.setLong(3, positionRetrieved.getId());

			try {
				updatePositionsStmt.executeUpdate();
			} catch (SQLException e) {
				e.printStackTrace();
			}
		}
	}

	public int addPosition(Magazine position) {

		int count = 0;
		try {
			addPositionStmt.setString(1, position.getName());
			addPositionStmt.setInt(2, position.getAmount());
			addPositionStmt.setInt(3, position.getMargin());

			count = addPositionStmt.executeUpdate();

		} catch (SQLException e) {
			e.printStackTrace();
		}
		return count;
	}

	public List<Magazine> getAllPositions() {

		List<Magazine> positions = new ArrayList<Magazine>();

		try {
			ResultSet rs = getAllPositionsStmt.executeQuery();

			while (rs.next()) {
				Magazine position = new Magazine();
				position.setId(rs.getInt("id_position"));
				position.setName(rs.getString("name"));
				position.setAmount(rs.getInt("amount"));
				position.setMargin(rs.getInt("margin"));
				positions.add(position);
			}

		} catch (SQLException e) {
			e.printStackTrace();
		}
		return positions;
	}
	
	public List<Magazine> getPositionsWithLowAmount(int amount){
		
		List<Magazine> positionsWithLowAmount = new ArrayList<Magazine>();
		
		try{
			getPositionsWithLowAmountStmt.setInt(1, amount);
			ResultSet rs = getPositionsWithLowAmountStmt.executeQuery();
			while (rs.next()) {
				Magazine position = new Magazine();
				position.setId(rs.getInt("id_position"));
				position.setName(rs.getString("name"));
				position.setAmount(rs.getInt("amount"));
				position.setMargin(rs.getInt("margin"));
				positionsWithLowAmount.add(position);
			}

		} catch (SQLException e) {
			e.printStackTrace();
		}
		return positionsWithLowAmount;
	}

}
